import "pacioli/primitives.schema";

define leftIdentity(x) = <i,i -> 1 | i in list rowDomain(x)> * (rowUnits(x) per rowUnits(x));
define rightIdentity(x) = <j,j -> 1 | j in list columnDomain(x)> * (columnUnits(x) per columnUnits(x));

define rightInverse(x) = solve(x, leftIdentity(x));
define leftInverse(x) = rightInverse(x^T)^T;
define inverse(x) = rightInverse(x);

define kleene(x) = let I = leftIdentity(x) in inverse(I-x) end;
define closure(x) = let I = leftIdentity(x) in inverse(I-x) - I end;

(*define kleene(x) = let I = leftIdentity(x) in solve(I-x, I) end;	
define closure(x) =	let I = leftIdentity(x) in solve(I-x, I) - I end;*)
	
define combis(list) = 
	let (result, dummy) = loopList(tuple([],list),
								   lambda(accu,x)
										let (result,tails) = accu in
											tuple(append([tuple(x,y) | y in list tail(tails)], result), tail(tails))
										end,
								   list)
	in
		result
	end;
	 		         
define columns(matrix) = [column(matrix,j) | j in list columnDomain(matrix)];
define rows(matrix) = [row(matrix,i) | i in list rowDomain(matrix)];

define magnitudeMatrix(mat) = <i,j -> magnitude(mat,i,j) | i,j in matrix mat>;
define unitMatrix(mat) = scale(unitFactor(mat), rowUnits(mat) per columnUnits(mat));

define support(x) = <i,j -> 1 | i,j in matrix x, not(magnitude(x,i,j) = 0)>;	


define positives(x) = x * <i,j -> 1 | i,j in matrix x, 0 < magnitude(x,i,j)>;
define negatives(x) = x * <i,j -> 1 | i,j in matrix x, magnitude(x,i,j) < 0>