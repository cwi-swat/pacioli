let
	logNot(x) = unitMatrix(x) - x,
  	flow = backward-forward,
	isReal = logNot(isJournal),
	isLiability = logNot(isAsset),
	isIllicit = logNot(isLicit),
	sign = isAsset - isLiability,
	pos(x) = positives(sign*x),
	neg(x) = negatives(sign*x)
in
	let tuples = [tuple(conspiracy,
						valuation.pos(licitProduction),
						valuation.neg(licitProduction),
						valuation.pos(illicitProduction),
						valuation.neg(illicitProduction)) |
					conspiracy in entity Conspiracy,
					semiflow := column(basis,conspiracy),
					illicitProduction := flow.(semiflow*isIllicit),
					licitProduction := flow.(semiflow*isLicit)]
	in
		[t | t in list tuples, (c, licPos, licNeg, illPos, illNeg) := t, 0 < illPos]
	end
end