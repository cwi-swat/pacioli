baseunit dollar "$";
baseunit euro "ï¿½";
baseunit each "each";
baseunit bag "bag";
baseunit case "case";
baseunit can "can";
baseunit tub "tub";
baseunit gal "gal";
baseunit roll "roll";
baseunit sleeve "sleeve";
baseunit box "box";
baseunit bottle "bottle";
baseunit loc "loc";
baseunit bit "bit";
unit byte "byte" 8*bit;
unit hour "hr" 3600*second;
unit litre "l" (deci metre)^3;
unit pound "lb" 0.45359237*kilo gram;
unit ounce "oz" pound/16;
unit barrel "bbl" 117.347765*litre;
entity Product "/home/paul/data/code/cwi/pacioli/cases/case1/product.entity";
index Product bom_unit "/home/paul/data/code/cwi/pacioli/cases/case1/product.bom_unit";
index Product trade_unit "/home/paul/data/code/cwi/pacioli/cases/case1/product.trade_unit";
entity Commodity "/home/paul/data/code/cwi/pacioli/cases/case2/commodity.entity";
entity Year "/home/paul/data/code/cwi/pacioli/cases/case2/year.entity";
entity Region "/home/paul/data/code/cwi/pacioli/cases/case2/region.entity";
index Commodity unit "/home/paul/data/code/cwi/pacioli/cases/case2/commodity.unit";
entity Ingredient "/home/paul/data/code/cwi/pacioli/cases/case3/ingredient.entity";
entity Menu "/home/paul/data/code/cwi/pacioli/cases/case3/menu.entity";
index Ingredient unit "/home/paul/data/code/cwi/pacioli/cases/case3/ingredient.unit";
conversion conv "Product" "bom_unit" "trade_unit";
projection P0 "Commodity,Year,Region.1" "Commodity.1";
projection P1 "Commodity,Year,Region.1" "Commodity,Year.1";
projection P2 "Year,Commodity.1,unit" "Commodity,Year,Region.unit,1,1";
entity Place "/home/paul/data/code/cwi/pacioli/cases/case4/place.entity";
entity Transition "/home/paul/data/code/cwi/pacioli/cases/case4/transition.entity";
index Place unit "/home/paul/data/code/cwi/pacioli/cases/case4/place.unit";
entity File "/home/paul/data/code/cwi/pacioli/cases/case5/file.entity";
entity Module "/home/paul/data/code/cwi/pacioli/cases/case5/module.entity";
load lines "/home/paul/data/code/cwi/pacioli/cases/case5/lines.csv" "loc" "empty" "File.1.0";
load semi_bom "/home/paul/data/code/cwi/pacioli/cases/case3/semi_bom.csv" "1.0" "Ingredient.unit" "Menu.1.0";
load owns "/home/paul/data/code/cwi/pacioli/cases/case5/owns.csv" "1.0" "File.1.0" "Module.1.0";
load menu_sales "/home/paul/data/code/cwi/pacioli/cases/case3/menu_sales.csv" "1.0" "Menu.1.0" "empty";
load parent "/home/paul/data/code/cwi/pacioli/cases/case5/parent.csv" "1.0" "Module.1.0" "Module.1.0";
load menu_price "/home/paul/data/code/cwi/pacioli/cases/case3/menu_price.csv" "dollar" "empty" "Menu.1.0";
load backward "/home/paul/data/code/cwi/pacioli/cases/case4/backward.csv" "1.0" "Place.unit" "Transition.1.0";
load root "/home/paul/data/code/cwi/pacioli/cases/case5/root.csv" "1.0" "Module.1.0" "empty";
load stock2 "/home/paul/data/code/cwi/pacioli/cases/case3/stock2.csv" "1.0" "Ingredient.unit" "empty";
load stock1 "/home/paul/data/code/cwi/pacioli/cases/case3/stock1.csv" "1.0" "Ingredient.unit" "empty";
load ingredient_price "/home/paul/data/code/cwi/pacioli/cases/case3/ingredient_price.csv" "dollar" "empty" "Ingredient.unit";
load amount "/home/paul/data/code/cwi/pacioli/cases/case2/amount.csv" "1.0" "Commodity,Year,Region.unit,1.0,1.0" "empty";
load sales_price "/home/paul/data/code/cwi/pacioli/cases/case1/sales_price.csv" "dollar" "empty" "Product.trade_unit";
load sales "/home/paul/data/code/cwi/pacioli/cases/case2/sales.csv" "dollar" "empty" "Commodity,Year,Region.1.0";
load purchase_price "/home/paul/data/code/cwi/pacioli/cases/case1/purchase_price.csv" "dollar" "empty" "Product.trade_unit";
load forward "/home/paul/data/code/cwi/pacioli/cases/case4/forward.csv" "1.0" "Place.unit" "Transition.1.0";
load output "/home/paul/data/code/cwi/pacioli/cases/case1/output.csv" "1.0" "Product.trade_unit" "empty";
load size "/home/paul/data/code/cwi/pacioli/cases/case5/size.csv" "byte" "empty" "File.1.0";
load valuation "/home/paul/data/code/cwi/pacioli/cases/case4/valuation.csv" "dollar" "empty" "Place.unit";
load bom "/home/paul/data/code/cwi/pacioli/cases/case1/bom.csv" "1.0" "Product.bom_unit" "Product.bom_unit";
eval result apply(lambda (agg) apply(multiply, apply(agg, size), apply(reciprocal, apply(agg, lines))), lambda (x) apply(join, apply(join, x, owns), apply(kleene, parent))); 
print result